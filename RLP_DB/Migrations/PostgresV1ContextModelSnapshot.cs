// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RLP_DB;
using RLP_DB.Contexts; // Add this line to include the namespace where PostgresV1Context is defined

#nullable disable

namespace RLP_DB.Migrations
{
    [DbContext(typeof(PostgresV1Context))]
    partial class PostgresV1ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RLP_DB.Models.LaunchEntry", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<double?>("CloudCover")
                        .HasColumnType("double precision");

                    b.Property<double?>("CloudCoverHigh")
                        .HasColumnType("double precision");

                    b.Property<double?>("CloudCoverLow")
                        .HasColumnType("double precision");

                    b.Property<double?>("CloudCoverMid")
                        .HasColumnType("double precision");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("LaunchEnd")
                        .HasColumnType("text");

                    b.Property<double?>("LaunchLatitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("LaunchLongitude")
                        .HasColumnType("double precision");

                    b.Property<string>("LaunchStart")
                        .HasColumnType("text");

                    b.Property<string>("Mission")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<double?>("Rain")
                        .HasColumnType("double precision");

                    b.Property<string>("Rocket")
                        .HasColumnType("text");

                    b.Property<double?>("Showers")
                        .HasColumnType("double precision");

                    b.Property<double?>("Snowfall")
                        .HasColumnType("double precision");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("StatusDescription")
                        .HasColumnType("text");

                    b.Property<double?>("Temperature")
                        .HasColumnType("double precision");

                    b.Property<double?>("Temperature120m")
                        .HasColumnType("double precision");

                    b.Property<double?>("Temperature180m")
                        .HasColumnType("double precision");

                    b.Property<double?>("Temperature80m")
                        .HasColumnType("double precision");

                    b.Property<double?>("Visibility")
                        .HasColumnType("double precision");

                    b.Property<double?>("WindSpeed10m")
                        .HasColumnType("double precision");

                    b.Property<double?>("WindSpeed120m")
                        .HasColumnType("double precision");

                    b.Property<double?>("WindSpeed180m")
                        .HasColumnType("double precision");

                    b.Property<double?>("WindSpeed80m")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("LaunchEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
