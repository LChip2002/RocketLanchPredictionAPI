// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RLP_DB.Contexts;

#nullable disable

namespace RLP_DB.Migrations
{
    [DbContext(typeof(PostgresV1Context))]
    [Migration("20250318100141_LaunchWeather")]
    partial class LaunchWeather
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RLP_DB.Models.LaunchEntry", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<double?>("CloudCover")
                        .HasColumnType("double precision");

                    b.Property<double?>("CloudCoverHigh")
                        .HasColumnType("double precision");

                    b.Property<double?>("CloudCoverLow")
                        .HasColumnType("double precision");

                    b.Property<double?>("CloudCoverMid")
                        .HasColumnType("double precision");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("FailedRocketLaunches")
                        .HasColumnType("integer");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("LaunchEnd")
                        .HasColumnType("text");

                    b.Property<double?>("LaunchLatitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("LaunchLongitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("LaunchMass")
                        .HasColumnType("double precision");

                    b.Property<string>("LaunchStart")
                        .HasColumnType("text");

                    b.Property<string>("Mission")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<double?>("Precipitation")
                        .HasColumnType("double precision");

                    b.Property<double?>("Rain")
                        .HasColumnType("double precision");

                    b.Property<string>("Rocket")
                        .HasColumnType("text");

                    b.Property<double?>("RocketDiameter")
                        .HasColumnType("double precision");

                    b.Property<double?>("RocketLength")
                        .HasColumnType("double precision");

                    b.Property<double?>("Snowfall")
                        .HasColumnType("double precision");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("StatusDescription")
                        .HasColumnType("text");

                    b.Property<int?>("SuccessfulRocketLaunches")
                        .HasColumnType("integer");

                    b.Property<double?>("Temperature")
                        .HasColumnType("double precision");

                    b.Property<double?>("Temperature120m")
                        .HasColumnType("double precision");

                    b.Property<double?>("Temperature180m")
                        .HasColumnType("double precision");

                    b.Property<double?>("Temperature80m")
                        .HasColumnType("double precision");

                    b.Property<double?>("ToThrust")
                        .HasColumnType("double precision");

                    b.Property<double?>("Visibility")
                        .HasColumnType("double precision");

                    b.Property<double?>("WindSpeed10m")
                        .HasColumnType("double precision");

                    b.Property<double?>("WindSpeed120m")
                        .HasColumnType("double precision");

                    b.Property<double?>("WindSpeed180m")
                        .HasColumnType("double precision");

                    b.Property<double?>("WindSpeed80m")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("launch_entries", (string)null);
                });

            modelBuilder.Entity("RLP_DB.Models.LaunchPrediction", b =>
                {
                    b.Property<Guid>("PredictionId")
                        .HasColumnType("uuid")
                        .HasColumnName("prediction_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("ParamsRocket")
                        .HasColumnType("jsonb")
                        .HasColumnName("params_rocket");

                    b.Property<string>("ParamsWeather")
                        .HasColumnType("jsonb")
                        .HasColumnName("params_weather");

                    b.Property<Guid?>("ResultId")
                        .HasColumnType("uuid")
                        .HasColumnName("result_id");

                    b.HasKey("PredictionId")
                        .HasName("launch_predictions_pkey");

                    b.HasIndex("ResultId");

                    b.ToTable("launch_predictions", (string)null);
                });

            modelBuilder.Entity("RLP_DB.Models.PredictionResult", b =>
                {
                    b.Property<Guid>("ResultId")
                        .HasColumnType("uuid")
                        .HasColumnName("result_id");

                    b.Property<double?>("Accuracy")
                        .HasColumnType("double precision")
                        .HasColumnName("accuracy");

                    b.Property<double?>("F1Score")
                        .HasColumnType("double precision")
                        .HasColumnName("f1_score");

                    b.Property<double?>("Loss")
                        .HasColumnType("double precision")
                        .HasColumnName("loss");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("model_name");

                    b.Property<string>("ModelPrediction")
                        .HasColumnType("text")
                        .HasColumnName("model_prediction");

                    b.Property<double?>("Precision")
                        .HasColumnType("double precision")
                        .HasColumnName("precision");

                    b.Property<double?>("Recall")
                        .HasColumnType("double precision")
                        .HasColumnName("recall");

                    b.HasKey("ResultId")
                        .HasName("prediction_results_pkey");

                    b.ToTable("prediction_results", (string)null);
                });

            modelBuilder.Entity("RLP_DB.Models.LaunchPrediction", b =>
                {
                    b.HasOne("RLP_DB.Models.PredictionResult", "Result")
                        .WithMany("LaunchPredictions")
                        .HasForeignKey("ResultId")
                        .HasConstraintName("launch_predictions_result_id_fkey");

                    b.Navigation("Result");
                });

            modelBuilder.Entity("RLP_DB.Models.PredictionResult", b =>
                {
                    b.Navigation("LaunchPredictions");
                });
#pragma warning restore 612, 618
        }
    }
}
